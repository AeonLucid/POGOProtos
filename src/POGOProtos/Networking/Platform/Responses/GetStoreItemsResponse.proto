syntax = "proto3";
package POGOProtos.Networking.Platform.Responses;

import "POGOProtos/Data/Player/Currency.proto";

message GetStoreItemsResponse {
	.POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.Status status = 1;             // Unconfirmed
	repeated .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem items = 2;  // Items to show in the shop
	repeated .POGOProtos.Data.Player.Currency player_currencies = 3;                               // currencies that player has at the moment
	string hash = 4;                                                                               // hash?

	message StoreItem {
		string item_id = 1;                                                                             // Internal ID (probably for Google Play/App Store) example: "pgorelease.incenseordinary.1"
		bool is_iap = 2;                                                                                // If true, this item is bought with real currency (USD, etc.) through the Play/App Store instead of Pokecoins
		.POGOProtos.Data.Player.Currency currency_to_buy = 3;                                           // This defines how much the item costs (with the exception of items that cost real money like Pokecoins, that's defined in the respective store)
		.POGOProtos.Data.Player.Currency yields_currency = 4;                                           // When bought, this IAP will yield this much currency
		.POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItemInfo yields_item = 5;  // The item and count of such item that this IAP will yield
		repeated .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreTags tags = 6;    // Stuff like SORT:12, CATEGORY:ITEMS
		int32 unknown7 = 7;                                                                             // Possibly something to toggle visibility in the store/purchasibility?
	}

	message StoreTags {
		string tag = 1;
		string value = 2;
	}

	message StoreItemInfo {
		string item_id = 1;
		int32 count = 2;
	}

	enum Status {
		UNDEFINED = 0;
		OKAY = 1;
	}
}
